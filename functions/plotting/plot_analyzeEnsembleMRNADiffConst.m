function plot_analyzeEnsembleMRNADiffConst(data, refVals, varList, varsToShow)

% order of panels from left to right:
panelLabel = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'};

% initialise figure 
figure('FileName', [char(datetime('today', 'Format', 'yyyy_MM_dd')), '_analyzeEnsembleMRNADiffConst'], ...
       'Name'    , 'analyzeEnsembleMRNADiffConst', ...
       'Units'   , 'centimeter', ...
       'Position', [2, 2, 17, 6.5]);

% load colors
load('3Reds4Blues4Greens3Greys3Violets.mat');

%% isolate "reference" parameter combination

% names of variables
varNameList    = varList.('Variable');
% sort data table along variables
data           = sortrows(data ,varNameList);
% isolate the rows with the "generic" parameter combination
isRef          = data.('v')                     == refVals.('v')                    & ...
                 data.('beta')                  == refVals.('beta')                 & ...
                 data.('transport probability') == refVals.('transport probability');
% remove the "reference" parameter combination from data 
refCmbs    = data( isRef, :);
data           = data(~isRef, :);
clear isRef
    
% find mRNA diffusion constants and half-lives in the data table    
DVals           = unique(data.('D'));
lifeVals        = unique(data.('halflife'));   

% iterate over variables
for index = 1:numel(varsToShow)
    % temporary copy of data
    tmpDat      = data;
    % variable name
    varName     = varNameList{varsToShow(index)};    
    % find variable values in the data table    
    varVals     = unique(tmpDat.(varName));    
    % number of values per parameter
    nVals       = numel(varVals);
    % find the "generic" value of the parameter
    genericVal  = refVals.(varName);
    % remove all entries with "generic" value for the current parameter
    tmpDat      = tmpDat(tmpDat.(varName) ~= genericVal, :);
    % add the a priori isolated "generic" parameter combinations
    tmpDat      = [tmpDat; refCmbs];
    % sort the data table along the values of the current variable of 
    % interest. Sort in descending order for "beta" (hence ascending for
    % 1/beta)
    if strcmp(varName, 'beta')
        tmpDat  = sortrows(tmpDat, varName, 'descend');
        varVals = sort(varVals, 'descend');
    else
        tmpDat  = sortrows(tmpDat, varName, 'ascend');
    end
    
    %% plot ensemble_D / D  for each diffusion constant and half-life

    % "generic" values and values for x-axis
    if strcmp(varName, 'v')
        xDat       = varVals;
    elseif strcmp(varName, 'beta')
        xDat       = 1./varVals;
        genericVal = 1/genericVal;
    elseif strcmp(varName, 'transport probability')
        xDat       = 100.*varVals;
        genericVal = 100*genericVal;
    end
    % axis 
    ax = axes('Units'   , 'centimeter', ...
              'Position', [(index - 1)*5.5 + 1.5, 1.5, 4, 4], ...
              'Color'   , 'none', ...
              'Box'     , 'off', ...
              'XLim'    , [0, xDat(end)], ...
              'YLim'    , [0, 5]); hold on;
    set(get(gca, 'XAxis'), 'Color', 'none')
    set(get(gca, 'YAxis'), 'Color', 'none')
    % panel label
    text('String'             , panelLabel{index}, ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 12, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'centimeter', ...
         'Position'           , [-0.75, ax.Position(4) + 0.2], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'bottom'); hold on;    
    
    % iterate over diffusion constants and half-lives
    for j = 1:numel(DVals)
        for k = 1:numel(lifeVals)
            yDat = tmpDat{tmpDat.('D') == DVals(j) & tmpDat.('halflife') == lifeVals(k), 'D_1State'};
            yDat = log10(yDat./DVals(j));
            plot(xDat, yDat, ...
                 'Color', colors.Red, ...
                 'LineWidth', 1); hold on;
        end
        % label current curve with passive diffusion coefficient "D"
        dY  = yDat(end) - yDat(end-1);
        dX  = xDat(end) - xDat(end-1);
        rot = (180/pi)*atan(dY/dX)*(xDat(end)/5); % 5 is the y-spread of the panel (in log10)
        pos = [7*xDat(end-1) + 3*xDat(end), 7*yDat(end-1) + 3*yDat(end)]./10;
        text('String'             , num2str(DVals(j)), ...
             'Interpreter'        , 'tex', ...
             'FontSize'           , 10, ...
             'FontName'           , 'Arial', ...
             'Units'              , 'data', ...
             'Rotation'           , rot, ...
             'Position'           , pos, ...
             'HorizontalAlignment', 'left', ...
             'VerticalAlignment'  , 'bottom'); hold on;  
    end
    % "D0" label
    if index == 1
        text('String'             , 'D_0 [\mum^2/s]', ...
             'Interpreter'        , 'tex', ...
             'FontSize'           , 10, ...
             'FontName'           , 'Arial', ...
             'Units'              , 'normalized', ...
             'Position'           , [1, 1], ...
             'HorizontalAlignment', 'right', ...
             'VerticalAlignment'  , 'middle'); hold on;  
    end
    % x-axis
    axes('Units'               , 'centimeter', ...
         'Position'            , ax.Position + [0, -0.1, 0, 0.1], ...
         'Box'                 , 'off', ...
         'Color'               , 'none', ...
         'FontSize'            , 10, ...
         'FontName'            , 'Arial', ...
         'LineWidth'           , 0.5, ...
         'TickDir'             , 'out', ...
         'TickLength'          , [0.02, 0.02], ...
         'TickLabelInterpreter', 'tex', ...
         'XLim'                , ax.XLim, ...
         'XTick'               , ax.XTick, ...
         'YLim'                , [0, 1]); hold on;
    set(get(gca, 'YAxis'), 'Color', 'none')
    set(get(gca, 'XLabel'), 'String'     , [varList.('Name for plots'){strcmp(varNameList, varName)}, ...
                                            varList.('Units for plots'){strcmp(varNameList, varName)}], ...
                            'Interpreter', 'tex', ...
                            'FontSize'   , 10, ...
                            'FontName'   , 'Arial')
    % highlight the value we use in our model
    scatter(genericVal, 0, ...
            'Marker'         , 'd', ...
            'SizeData'       , 15, ...
            'MarkerFaceColor', colors.Red, ...
            'MarkerEdgeColor', 'black', ...
            'LineWidth'      , 0.5); hold on;
    % y-axis
    axes('Units'               , 'centimeter', ...
         'Position'            , ax.Position + [-0.1, 0, 0.1, 0], ...
         'Box'                 , 'off', ...
         'Color'               , 'none', ...
         'FontSize'            , 10, ...
         'FontName'            , 'Arial', ...
         'LineWidth'           , 0.5, ...
         'TickDir'             , 'out', ...
         'TickLength'          , [0.02, 0.02], ...
         'TickLabelInterpreter', 'tex', ...
         'XLim'                , [0, 1], ...
         'YLim'                , ax.YLim, ...
         'YTick'               , ax.YTick);
    set(get(gca, 'XAxis'), 'Color', 'none')
    if index == 1
        set(get(gca, 'YLabel'), 'String'     , 'log_{10} D/D_0', ...
                                'Interpreter', 'tex', ...
                                'FontSize'   , 10, ...
                                'FontName'   , 'Arial')
    end
    
    %% legend for "generic" value markers
    
    if index == 1
        % axis
        mat                        = [20,  0,  0,  0;
                                       0, 20,  0,  0;
                                       1,  0,  8,  0;
                                       0, 17,  0,  2]./20;
        axL                        = axes('units', 'centimeter', 'Position', ax.Position*mat); hold on;
        axL.Color                  = 'none';
        axL.Box                    = 'off';
        axL.XLim                   = [0, 1];
        axL.XAxis.Color            = 'none';
        axL.YLim                   = [0, 1];
        axL.YAxis.Color            = 'none';   
        % legend marker
        scatter(0, 0.5, ...
                'Marker'         , 'd', ...
                'SizeData'       , 15, ...
                'MarkerFaceColor', colors.Red, ...
                'MarkerEdgeColor', 'black', ...
                'LineWidth'      , 0.5); hold on;
        % legend label
        text('String'             , {'Model', 'parameter'}, ...
             'Interpreter'        , 'tex', ...
             'FontSize'           , 10, ...
             'FontName'           , 'Arial', ...
             'Units'              , 'data', ...
             'Position'           , [0.15, 0.5], ...
             'HorizontalAlignment', 'left', ...
             'VerticalAlignment'  , 'middle'); hold on; 
    end
end
