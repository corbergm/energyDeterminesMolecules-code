function plot_mRNAAndProteinCorrelationAllDendrLens(data)

% set panel labels
panelLabel = {'', '', '', ''};
% initialise figure
figure('FileName', [char(datetime('today', 'Format', 'yyyy_MM_dd')), '_mRNAAndProteinCorrelationAllDendrLens'], ...
       'Name'    , 'mRNAAndProteinCorrelationAllDendrLens', ...
       'Units'   , 'centimeter', ...
       'Position', [2, 2, 17, 5]);

%% get mRNA and protein abundances

% sort along dendrite length
data          = sortrows(data, 'length', 'ascend');
% find length values in the data table    
varVals       = unique(data.('length'));    
% number of length values
nVals         = numel(varVals);
% number of entries
nRows         = size(data, 1);
% store the cheapest strategy per parameter combination
% (0 = somatic mRNA, 1 = dendritic mRNA with mRNA transport)
denIsCheapest = data.('totalCost - den') < data.('totalCost - som');
% abundance of mRNA and protein when using the cheapest strategy
nMRNA         = (data.('mRNADendrTotal - som') + data.('mRNASomaTotal - som')).*(1 - denIsCheapest) ...
              + (data.('mRNADendrTotal - den') + data.('mRNASomaTotal - den')).*denIsCheapest;
nProtein      = (data.('proteinDendrTotal - som') + data.('proteinSpineTotal - som')).*(1 - denIsCheapest) ...
              + (data.('proteinDendrTotal - den') + data.('proteinSpineTotal - den')).*denIsCheapest;
% reshape into matrices with entries for each length value in a single
% column (works because table was sorted)
nMRNA         = reshape(nMRNA   , nRows/nVals, nVals);
nProtein      = reshape(nProtein, nRows/nVals, nVals);
% number of entries per length
nRows         = nRows/nVals;

%% plot mRNA abundance using the cheapest strategy

% Global limit of panels based on data ranges
mLim = [-1 + floor(min(log10(nMRNA   ), [], 'all')), 1 + ceil(max(log10(nMRNA   ), [], 'all'))];
pLim = [-1 + floor(min(log10(nProtein), [], 'all')), 1 + ceil(max(log10(nProtein), [], 'all'))];
% Iterate over dendrite lengths
for i = 1:nVals
    % axis
    ax = axes('Units'               , 'centimeter', ...
              'Position'            , [1.5 + 4*(i-1), 1.5, 3, 3], ...
              'Color'               , 'none', ...
              'Box'                 , 'off', ...
              'FontSize'            , 10, ...
              'FontName'            , 'Arial', ...
              'LineWidth'           , 0.5, ...
              'TickDir'             , 'out', ...
              'TickLength'          , [0.02, 0.02], ...
              'TickLabelInterpreter', 'tex', ...
              'XLim'                , mLim, ...
              'XTick'               , -5:5:25, ...
              'YLim'                , pLim, ...
              'YTick'               , -5:5:25); hold on;
    if i == 1
        set(get(gca, 'YLabel'), 'String'     , {'log_{10} protein count'}, ...
                                'Interpreter', 'tex', ...
                                'FontSize'   , 10, ...
                                'FontName'   , 'Arial')
    end
    if i == 2
        set(get(gca, 'XLabel'), 'String'     , {'log_{10} mRNA count'}, ...
                                'Interpreter', 'tex', ...
                                'FontSize'   , 10, ...
                                'FontName'   , 'Arial')
    end
    % plot panel label
    text('String'             , panelLabel{i}, ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 12, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'centimeter', ...
         'Position'           , [-0.5, ax.Position(4) + 0.2], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'bottom'); hold on;
    % for each dendrite length, plot mRNA abundance for each parameter 
    % combination using the cheapest strategy
    xDat = log10(nMRNA(:, i));
    yDat = log10(nProtein(:, i));
    scatter(xDat, yDat, ...
        'Marker'         , 'o', ...
        'SizeData'       , 25, ...
        'CData'          , (0.8 - i*0.07).*[1, 1, 1], ... %Reds(round(256*i/nVals), :), ...
        'MarkerFaceColor', 'flat', ...
        'MarkerEdgeColor', 'black', ...
        'MarkerEdgeAlpha', 0.5, ...
        'LineWidth'      , 0.1); hold on;
    % Perform a linear regression on the (log10-)abundance values
    mdl                     = fitlm(xDat, yDat); 
    beta                    = mdl.Coefficients.Estimate;
    % Plot linear model
    xDat = (-1 + floor(min(log10(nMRNA(:, i))))) : 0.1 : (2 + ceil(max(log10(nMRNA(:, i)))));
    yDat = beta(1) + beta(2).*xDat;
    plot(xDat, yDat, ...
         'Color'    , 'black', ...
         'LineStyle', ':', ...
         'LineWidth', 1); hold on;
    % Show the R^2 value of linear model
    text('String'             , ['R^2=', num2str(round(mdl.Rsquared.Ordinary, 3))], ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 10, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'normalized', ...
         'Position'           , [0.5, 1], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'middle'); hold on; 
    % Show current dendrite length
    text('String'             , {[num2str(varVals(i)), ' \mum'], 'dendrite'}, ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 10, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'normalized', ...
         'Position'           , [0.8, 0.2], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'middle'); hold on; 
end