function plot_nSpeciesPreferringmRNAandProteinTransport(data, varList)

% names of variables
varNameList = varList.('Variable');
% sort along all iterated variables 
data        = sortrows(data, varNameList, 'ascend');
% find dendrite length values in the data table    
varVals     = unique(data.('length'));    
% number of dendrite length values in the data table
nVals       = numel(varVals);
% container for fractions of parameter combinations preferring transport of
% noting / only protein / only mRNA / mRNA & protein
results     = zeros(size(varVals, 1), 4);
% iterate over dendrite lengths
for i = 1:nVals
    % get data with current dendrite length
    tmpDat = data(data.('length') == varVals(i), :);
    % Split the table into entries with and without protein transport. 
    % It is sufficient to use "transp_p - som" as splitting criterion, 
    % because all "transp_p"-containing entries are the same per row.
    withProtTransp = tmpDat(tmpDat.("transp_p - som")  > 0, :);
    withProtTransp = sortrows(withProtTransp, varNameList);
    noProtTransp   = tmpDat(tmpDat.("transp_p - som")  == 0, :);
    noProtTransp   = sortrows(noProtTransp, varNameList);
    % for each parameter combination, derive the total costs for each of 
    % the four transport options
    passM_passP = noProtTransp.("totalCost - som");
    passM_actP  = withProtTransp.("totalCost - som");
    actM_passP  = noProtTransp.("totalCost - den");
    actM_actP   = withProtTransp.("totalCost - den");
    % for each parameter combination, find the cheapest alternative among 
    % the four options
    [~, minInd] = min([passM_passP, passM_actP, actM_passP, actM_actP], [], 2);
    % count the number of parameter combinations preferring each of the
    % four options
    passM_passP = sum(minInd == 1);
    passM_actP  = sum(minInd == 2);
    actM_passP  = sum(minInd == 3);
    actM_actP   = sum(minInd == 4);
    % normalize to [0, 1]
    n = sum([passM_passP, passM_actP, actM_passP, actM_actP]);
    % store in results matrix
    results(i, 1) = passM_passP/n;
    results(i, 2) = passM_actP/n;
    results(i, 3) = actM_passP/n;
    results(i, 4) = actM_actP/n;

end
    
%% plot results

% label of panels from top left to bottom right:
panelLabels = {''};

% initialise figure
figure('FileName', [char(datetime('today', 'Format', 'yyyy_MM_dd')), '_nSpeciesPreferringmRNAandProteinTransport'], ...
       'Name'    , 'nSpeciesPreferringmRNAandProteinTransport', ...
       'Units'   , 'centimeter', ...
       'Position', [2, 2, 8.5, 5]);

% load colors
load('3Reds4Blues4Greens3Greys3Violets.mat');
% colors and labels for the four transport options
EdgeColors = {   colors.Red;   colors.Blue; colors.Red; colors.Violet};
FaceColors = {'none'; 'none'; colors.Red; colors.Violet};
labels = {{'somatic mRNA'}, {'somatic mRNA', '+ protein transport'}, {'dendritic mRNA'}, {'dendritic mRNA', '+ protein transport'}};

% axis
ax = axes('Units'               , 'centimeter', ...
          'Position'            , [1.5, 1, 4, 3], ...
          'Color'               , 'none', ...
          'Box'                 , 'off', ...
          'FontSize'            , 10, ...
          'FontName'            , 'Arial', ...
          'LineWidth'           , 0.5, ...
          'TickDir'             , 'out', ...
          'TickLength'          , [0.02, 0.02], ...
          'TickLabelInterpreter', 'tex', ...
          'XLim'                , [0.4, nVals + 0.6], ...
          'YLim'                , [0, 1], ...
          'YTick'               , 0:0.2:1); hold on;
set(get(gca, 'XAxis'), 'Color', 'none')
set(get(gca, 'YAxis'), 'Color', 'none')
% panel label
text('String'             , panelLabels{1}, ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 12, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'centimeter', ...
     'Position'           , [-1.5, ax.Position(4) + 0.2], ...
     'HorizontalAlignment', 'center', ...
     'VerticalAlignment'  , 'bottom'); hold on;
% bar plot
for k = 1:nVals
    yDat = results(k, :);
    xDat = k;
    b    = bar(xDat, yDat, 'stacked'); hold on;
    for j = 1:4
        b(j).LineWidth = 0.5;
        b(j).EdgeColor = EdgeColors{j};
        b(j).FaceColor = FaceColors{j};
        % add bar labels (with a triangular marker) for each stacked 
        % sub-bar on the right end of the plot
        if k == 4 && results(k, j) > 0
            if j == 3
                yDat = sum(results(k, 1:j)) - 4*results(k, j)/5;
            else
                yDat = sum(results(k, 1:j)) -   results(k, j)/2;
            end
            scatter(ax.XLim(2) - 0.1, yDat, ...
                    'Marker'         , '>', ...
                    'SizeData'       , 10, ...
                    'LineWidth'      , 0.5, ...
                    'MarkerEdgeColor', EdgeColors{j}, ...
                    'MarkerFaceColor', FaceColors{j})
            text('String'             , labels{j}, ...
                 'Interpreter'        , 'tex', ...
                 'FontSize'           , 10, ...
                 'FontName'           , 'Arial', ...
                 'Units'              , 'data', ...
                 'Position'           , [ax.XLim(2) + 0.1, yDat], ...
                 'HorizontalAlignment', 'left', ...
                 'VerticalAlignment'  , 'middle'); hold on;
        end
    end
end
% x-axis tick label
for i = 1:nVals
    text('String'             , num2str(varVals(i)), ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 10, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'data', ...
         'Position'           , [i, 0], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'top'); hold on;
end
% label x-axis
text('String'             , 'Dendrite length [\mum]', ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'normalized', ...
     'Position'           , [0.5, -0.2], ...
     'HorizontalAlignment', 'center', ...
     'VerticalAlignment'  , 'middle'); hold on; 
% y-axis label
text('String'             , {'Fraction of', 'protein species'}, ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'normalized', ...
     'Position'           , [0, 0.5], ...
     'Rotation'           , 90, ...
     'HorizontalAlignment', 'center', ...
     'VerticalAlignment'  , 'bottom'); hold on;
% label for bar legend
text('String'             , '______________', ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'normalized', ...
     'Position'           , [1, 1.15], ...
     'HorizontalAlignment', 'left', ...
     'VerticalAlignment'  , 'bottom'); hold on; 
text('String'             , 'Optimal strategy:', ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'normalized', ...
     'Position'           , [1, 1.17], ...
     'HorizontalAlignment', 'left', ...
     'VerticalAlignment'  , 'bottom'); hold on; 
