function plot_totalCostPerSuppliedProtein_multLength(data, yLim)

panelLabels = {'', '', '', ''};

% initialise figure
figure('FileName', [char(datetime('today', 'Format', 'yyyy_MM_dd')), '_totalCostPerSuppliedProtein_multLength'], ...
       'Name'    , 'totalCostPerSuppliedProtein_multLength', ...
       'Units'   , 'centimeter', ...
       'Position', [2, 2, 6.5, 4.5]);

% load colors
load('3Reds4Blues4Greens3Greys3Violets.mat');

%% get mRNA and protein abundances

% find dendrite length values in the data table    
varVals          = unique(data.('length'));    
% number of dendrite length values in the data table
nVals            = numel(varVals);
% container for total cost per supplied protein
costPerSpineProt = cell(size(varVals));
% container for medians
costMedianPerLen = zeros(size(varVals));
% calculate total cost per supplied protein for all dendritic lengths
for i = 1:nVals
    % get data with current dendrite length
    tmpDat              = data(data.('length') == varVals(i), :);
    % store the cheapest strategy per parameter combination 
    % (0 = somatic mRNA, 1 = dendritic mRNA with mRNA transport)
    denIsCheapest       = tmpDat.('totalCost - den') < tmpDat.('totalCost - som');
    % get total cost for the cheapest pathway per parameter combination,
    % and normalize with the number of supplied proteins in spines
    costPerSpineProt{i} = tmpDat.('totalCost - den')./tmpDat.('proteinSpineTotal - den').*( denIsCheapest) + ...
                          tmpDat.('totalCost - som')./tmpDat.('proteinSpineTotal - som').*(~denIsCheapest);
    % store (log10-)median
    costMedianPerLen(i) = median(log10(costPerSpineProt{i}));
end
% linear regression on the (log10-)median values
mdl  = fitlm(varVals, costMedianPerLen); 
beta = mdl.Coefficients.Estimate;

%% plot total cost per spine protein

% axis
ax = axes('Units'               , 'centimeter', ...
          'Position'            , [2, 1, 4, 3], ...
          'Color'               , 'none', ...
          'Box'                 , 'off', ...
          'FontSize'            , 10, ...
          'FontName'            , 'Arial', ...
          'LineWidth'           , 0.5, ...
          'TickDir'             , 'out', ...
          'TickLength'          , [0.02, 0.02], ...
          'TickLabelInterpreter', 'tex', ...
          'XLim'                , [0.4, nVals + 0.6], ...
          'YLim'                , yLim, ...
          'YTick'               , -10:2:30); hold on;
set(get(gca, 'XAxis'), 'Color', 'none')
set(get(gca, 'YLabel'), 'String'     , {'log_{10} cost per supplied', 'spine protein [ATP/s]'}, ...
                        'Interpreter', 'tex', ...
                        'FontSize'   , 10, ...
                        'FontName'   , 'Arial')
% panel label
text('String'             , panelLabels{1}, ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 12, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'centimeter', ...
     'Position'           , [-1.5, ax.Position(4) + 0.2], ...
     'HorizontalAlignment', 'center', ...
     'VerticalAlignment'  , 'bottom'); hold on;
% plot cost per spine protein
for i = 1:nVals
    % boxplot with total cost, normalized with total spine protein number
    yDat = log10(costPerSpineProt{i});
    xDat = i.*ones(size(yDat));
    boxchart(xDat, yDat, ...
             'BoxWidth'        , 0.5, ...
             'MarkerStyle'     , 'none', ...
             'WhiskerLineColor', 'black', ...
             'BoxFaceColor'    , 'black', ...
             'BoxFaceAlpha'    , 0.25, ...
             'LineWidth'       , 1); hold on;
    % x-axis tick label
    text('String'             , num2str(varVals(i)), ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 10, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'data', ...
         'Position'           , [i, yLim(1)], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'top'); hold on;
end
% label x-axis
text('String'             , 'Dendrite length [\mum]', ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'normalized', ...
     'Position'           , [0.5, -0.2], ...
     'HorizontalAlignment', 'center', ...
     'VerticalAlignment'  , 'middle'); hold on; 
% plot linear fit of medians
xDat = 0.4:0.1:4.6;
yDat = beta(1) + 250*beta(2).*xDat;
plot(xDat, yDat, ...
     'Color'    , 'black', ...
     'LineStyle', ':', ...
     'LineWidth', 1); hold on;
% show R^2 value of linear fit
text('String'             , ['R^2=', num2str(round(mdl.Rsquared.Ordinary, 3))], ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'normalized', ...
     'Position'           , [0.5, 1], ...
     'HorizontalAlignment', 'center', ...
     'VerticalAlignment'  , 'top'); hold on; 
