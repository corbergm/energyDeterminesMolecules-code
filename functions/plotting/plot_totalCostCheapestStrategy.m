function plot_totalCostCheapestStrategy(data, varList, varsToShow, yLim)

% initialise figure
figure('FileName', [char(datetime('today', 'Format', 'yyyy_MM_dd')), '_totalCostCheapestStrategy'], ...
       'Name'    , 'totalCostCheapestStrategy', ...
       'Units'   , 'centimeter', ...
       'Position', [0, 0, 15, 10.5]);

% load colors
load('3Reds4Blues4Greens3Greys3Violets.mat');

% label of panels from top left to bottom right:
panelLabel    = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};
% names of variables
varNameList   = varList.('Variable');
% sort data table along variables
data          = sortrows(data ,varNameList);
% iterate of variables to be shown
for index = 1:numel(varsToShow)

    % get total cost per parameter value
    % ---------------------------------------------------------------------
    tmpDat    = data;
    % variable name
    varName   = varNameList{varsToShow(index)};    
    % find variable values in the data table    
    varVals   = categories(categorical(tmpDat.(varName)));    
    % number of values per parameter
    nVals     = numel(varVals);
    % number of entries
    nRows     = size(tmpDat, 1);
    % sort the data table along the values of the current variable of 
    % interest
    tmpDat    = sortrows(tmpDat, varName, 'ascend');
    % get the total cost of the cheapest strategy for each parameter
    % combination
    totalCost = log10(min([tmpDat.('totalCost - som'), tmpDat.('totalCost - den')], [], 2));
    % reshape into matrix with entries for each parameter value in a single
    % column (works because table was sorted)
    totalCost = reshape(totalCost, nRows/nVals, nVals);
    
    % plot total cost per parameter value
    % ---------------------------------------------------------------------
    % plot three panels in the first and further panels in the second row
    if index < 4
        pos = [(index    )*3.5 + 1.25, 6.5, 3, 3];
    else
        pos = [(index - 4)*3.5 + 1.25, 1.5, 3, 3];
    end
    % axis
    ax = axes('Units'               , 'centimeter', ...
              'Position'            , pos, ...
              'Color'               , 'none', ...
              'Box'                 , 'off', ...
              'FontSize'            , 10, ...
              'FontName'            , 'Arial', ...
              'LineWidth'           , 0.5, ...
              'TickDir'             , 'out', ...
              'TickLength'          , [0.02, 0.02], ...
              'TickLabelInterpreter', 'tex', ...
              'XLim'                , [0.5, nVals + 0.5], ...
              'YLim'                , yLim); hold on;
    set(get(gca, 'XAxis'), 'Color', 'none')
    if ismember(index, [1, 4])
        set(get(gca, 'YLabel'), 'String'     , 'log_{10} cost [ATP/s]', ...
                                'Interpreter', 'tex', ...
                                'FontSize'   , 10, ...
                                'FontName'   , 'Arial')
    else
        set(gca, 'YTickLabel', {})
    end
    % panel label
    text('String'             , panelLabel{index}, ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 12, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'centimeter', ...
         'Position'           , [-0.35, ax.Position(4) + 0.2], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'bottom'); hold on;    
    % set the colors (reds for mRNA, blues for protein)
    if strcmp(varName, 'D_m') || strcmp(varName, 'halflife_m') || strcmp(varName, 'nucleotides:aminoAcids')
        shortColorList = [colors.LightRed; colors.Red; colors.DarkRed];
    elseif strcmp(varName, 'D_p') || strcmp(varName, 'halflife_p') || strcmp(varName, 'aminoAcids') || strcmp(varName, 'eta_p')
        shortColorList = [colors.LightBlue; colors.Blue; colors.DarkBlue];
    end
    % bar plot
    for i = 1:nVals
        boxchart(i.*ones(nRows/nVals, 1), (totalCost(:, i)), ...
                 'BoxFaceColor'    , shortColorList(i, :), ...
                 'BoxFaceAlpha'    , 0.2, ...
                 'LineWidth'       , 1, ...
                 'MarkerColor'     , 'none', ...
                 'WhiskerLineColor', shortColorList(i, :)); hold on;
    end
    % x-axis ticks
    for j = 1:nVals
        % correct units (hours for mRNA halflife, days for protein halflife,
        % log10 for diffusion constants)
        if strcmp(varName, 'halflife_m')
            tmpStr = num2str(str2double(varVals{j})/3600);
        elseif strcmp(varName, 'halflife_p')
            tmpStr = num2str(str2double(varVals{j})/(3600*24));
        elseif strcmp(varName, 'D_m')
            tmpStr = num2str(log10(str2double(varVals{j})));
        elseif strcmp(varName, 'D_p')
            tmpStr = num2str(log10(str2double(varVals{j})));
        elseif strcmp(varName, 'nucleotides:aminoAcids')
            tmpStr = [num2str(str2double(varVals{j}) - 3), '/3'];
        else
            tmpStr = varVals{j};
        end
        text('String'             , tmpStr, ...
             'Interpreter'        , 'tex', ...
             'FontSize'           , 10, ...
             'FontName'           , 'Arial', ...
             'Units'              , 'normalized', ...
             'Position'           , [(2*j-1)/(2*nVals), 0], ...
             'HorizontalAlignment', 'center', ...
             'VerticalAlignment'  , 'top'); hold on;
    end
    % x-axis label
    text('String'             , [varList.('Name for plots'){strcmp(varNameList, varName)}, ...
                                 varList.('Units for plots'){strcmp(varNameList, varName)}], ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 10, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'normalized', ...
         'Position'           , [0.5, -0.2], ...
         'HorizontalAlignment', 'center', ...
         'VerticalAlignment'  , 'middle'); hold on;
end
