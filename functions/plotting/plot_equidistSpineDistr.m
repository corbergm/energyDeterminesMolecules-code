function plot_equidistSpineDistr(discr, contin, rhoList, params)

% initialise figure
figure('FileName', [char(datetime('today', 'Format', 'yyyy_MM_dd')), '_equidistSpineDistr'], ...
       'Name'    , 'equidistSpineDistr', ...
       'Units'   , 'centimeter', ...
       'Position', [2, 2, 7, 5.5]);

% load colors
load('3Reds4Blues4Greens3Greys3Violets.mat');
% set color list 
colorList = [colors.LightBlue; colors.Blue; colors.DarkBlue];

% axis
ax = axes('Units'   , 'centimeter', ...
          'Position', [1.5, 1.5, 5, 3.5], ...
          'Color'   , 'none', ...
          'Box'     , 'off', ...
          'XLim'    , [0, params.length], ...
          'YLim'    , [0, 800]); hold on;
set(get(gca, 'XAxis'), 'Color', 'none')
set(get(gca, 'YAxis'), 'Color', 'none')

%% plot protein distributions from discrete and continuous uptake model

% plot protein distributions computed with the continuous uptake model
for rep = 1:numel(rhoList)
    xDat = contin{1, rep};
    yDat = contin{3, rep}.data;
    plot(xDat, yDat, ...
         'Color'    , colorList(rep, :), ...
         'LineWidth', 1.5); hold on;
end
% plot protein distributions computed with the continuous uptake model
for rep = 1:numel(rhoList)
    spineLocs = discr{1, rep};
    xval      = discr{2, rep};
    spineDist = discr{3, rep};
    protein   = discr{5, rep};
    xDat      = [0, spineLocs'] + (spineDist*xval)';
    yDat      = protein.data';
    plot(xDat(:), yDat(:), ...
         'Color'    , 'black', ...
         'LineStyle', ':', ...
         'LineWidth', 1.5); hold on;
end
% x-axis
axes('Units'               , 'centimeter', ...
     'Position'            , ax.Position + [0, -0.1, 0, 0.1], ...
     'Box'                 , 'off', ...
     'Color'               , 'none', ...
     'FontSize'            , 10, ...
     'FontName'            , 'Arial', ...
     'LineWidth'           , 0.5, ...
     'TickDir'             , 'out', ...
     'TickLength'          , [0.02, 0.02], ...
     'TickLabelInterpreter', 'tex', ...
     'XTickLabelRotation'  , 0, ...
     'XLim'                , ax.XLim, ...
     'XTick'               , ax.XTick, ...
     'XTickLabel'          , ax.XTickLabel, ...
     'YLim'                , [0, 1]);
set(get(gca, 'YAxis'), 'Color', 'none')
set(get(gca, 'XLabel'), 'String'     , 'Dendritic distance [\mum]', ...
                        'Interpreter', 'tex', ...
                        'FontSize'   , 10, ...
                        'FontName'   , 'Arial')
% y-axis
axes('Units'               , 'centimeter', ...
     'Position'            , ax.Position + [-0.1, 0, 0.1, 0], ...
     'Box'                 , 'off', ...
     'Color'               , 'none', ...
     'FontSize'            , 10, ...
     'FontName'            , 'Arial', ...
     'LineWidth'           , 0.5, ...
     'TickDir'             , 'out', ...
     'TickLength'          , [0.02, 0.02], ...
     'TickLabelInterpreter', 'tex', ...
     'YLim'                , ax.YLim, ...
     'YTick'               , ax.YTick);
set(get(gca, 'XAxis'), 'Color', 'none')
set(get(gca, 'YLabel'), 'String'     , 'Protein /\mum', ...
                        'Interpreter', 'tex', ...
                        'FontSize'   , 10, ...
                        'FontName'   , 'Arial')

%% plot legend

mat = [20,  0,  0,  0;
        0, 20,  0,  0;
       16,  0,  4,  0;
        0, 10,  0, 12]./20;                               
% axis
axes('Units'     , 'centimeter', ...
     'Position'  , ax.Position*mat, ...
     'Box'       , 'off', ...
     'Color'     , 'none', ...
     'XLim'      , [0, 1], ...
     'XTickLabel', {'0', '', '', '150', '', '', '300'}, ...
     'YLim'      , [0, 4 + numel(rhoList)]); hold on;
set(get(gca, 'XAxis'), 'Color', 'none')
set(get(gca, 'YAxis'), 'Color', 'none')

% create legend entry "continuous spine model"
plot([0.5, 1], 6.*[1, 1], ...
     'Color'    , colors.Grey, ...
     'LineWidth', 2); hold on;
text('String'             , 'Continuous spines', ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'data', ...
     'Position'           , [0.4, 6], ...
     'HorizontalAlignment', 'right', ...
     'VerticalAlignment'  , 'middle'); hold on;
% create legend with "discrete spine model"
plot([0.5, 1], 5.*[1, 1], ...
     'Color'    , 'black', ...
     'LineStyle', ':', ...
     'LineWidth', 1); hold on;
text('String'             , 'Discrete spines', ...
     'Interpreter'        , 'tex', ...
     'FontSize'           , 10, ...
     'FontName'           , 'Arial', ...
     'Units'              , 'data', ...
     'Position'           , [0.4, 5], ...
     'HorizontalAlignment', 'right', ...
     'VerticalAlignment'  , 'middle'); hold on;
% create legend entries for the spine densities
for j = 1:numel(rhoList)
    plot([0.5, 1], j.*[1, 1], ...
         'Color'    , colorList(j, :), ...
         'LineWidth', 2); hold on;
    plot([0.5, 1], j.*[1, 1], ...
         'Color'    , 'black', ...
         'LineStyle', ':', ...
         'LineWidth', 1); hold on;
    if rhoList(j) == 1
        label = '1 spine /\mum';
    else
        label = [num2str(rhoList(j)), ' spines /\mum'];
    end
    text('String'             , label, ...
         'Interpreter'        , 'tex', ...
         'FontSize'           , 10, ...
         'FontName'           , 'Arial', ...
         'Units'              , 'data', ...
         'Position'           , [0.4, j], ...
         'HorizontalAlignment', 'right', ...
         'VerticalAlignment'  , 'middle'); hold on;
end
